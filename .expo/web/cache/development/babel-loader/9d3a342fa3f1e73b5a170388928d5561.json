{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"/Users/jdavid/Documents/africariyoki/src/components/lrcParser/LRCParser.js\";\nimport React, { Component } from 'react';\nimport Lyric from 'lrc-file-parser';\nimport moment from \"moment\";\nimport \"./LRCParser.css\";\n\nvar LRCParser = function (_Component) {\n  _inherits(LRCParser, _Component);\n\n  function LRCParser(props) {\n    var _this;\n\n    _classCallCheck(this, LRCParser);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(LRCParser).call(this, props));\n\n    _this.onPlayFunction = function (lineNumber, currentLine) {\n      _this.setState({\n        lineNumber: lineNumber,\n        currentLine: currentLine\n      });\n    };\n\n    _this.onSetLyricFunction = function (arrayLyrics) {\n      _this.setState({\n        arrayLyrics: arrayLyrics\n      });\n    };\n\n    _this.updateTimer = function () {\n      var x = setInterval(function () {\n        var eventDate = _this.state.eventDate;\n\n        if (!_this.props.pause) {\n          eventDate = eventDate.add(1, \"s\");\n\n          _this.state.lrc.play(eventDate.minutes() * 60000 + eventDate.seconds() * 1000);\n\n          _this.setState({\n            eventDate: eventDate\n          });\n        } else {\n          _this.state.lrc.pause();\n        }\n      }, 1000);\n    };\n\n    _this.state = {\n      title: \"hersss\",\n      lineNumber: 1,\n      prevLine: \"\",\n      currentLine: \"\",\n      nextLine: \"\",\n      arrayLyrics: [],\n      eventDate: moment.duration().add({\n        days: 0,\n        hours: 0,\n        minutes: 0,\n        seconds: 0\n      }),\n      lrc: new Lyric({\n        onPlay: _this.onPlayFunction,\n        onSetLyric: _this.onSetLyricFunction,\n        offset: 15000\n      })\n    };\n    return _this;\n  }\n\n  _createClass(LRCParser, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.updateTimer();\n      this.state.lrc.setLyric(this.props.lyrics);\n      this.state.lrc.play(0);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"Lyrics-container LRCParser-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        }\n      }, this.state.arrayLyrics[this.state.lineNumber - 1] && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        }\n      }, cleanLine(this.state.arrayLyrics[this.state.lineNumber - 1].text)), React.createElement(\"p\", {\n        className: \"LRCParser-currentLine\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        }\n      }, cleanLine(this.state.currentLine)), this.state.arrayLyrics[this.state.lineNumber + 1] && React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        }\n      }, cleanLine(this.state.arrayLyrics[this.state.lineNumber + 1].text)));\n    }\n  }]);\n\n  return LRCParser;\n}(Component);\n\nfunction cleanLine(string) {\n  return string.replace(/[^\\w\\s]/gi, '').toLowerCase().replace(\"by rentanadvisercom\", '***');\n}\n\nexport default LRCParser;","map":{"version":3,"sources":["/Users/jdavid/Documents/africariyoki/src/components/lrcParser/LRCParser.js"],"names":["React","Component","Lyric","moment","LRCParser","props","onPlayFunction","lineNumber","currentLine","setState","onSetLyricFunction","arrayLyrics","updateTimer","x","setInterval","eventDate","state","pause","add","lrc","play","minutes","seconds","title","prevLine","nextLine","duration","days","hours","onPlay","onSetLyric","offset","setLyric","lyrics","cleanLine","text","string","replace","toLowerCase"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Lyric from 'lrc-file-parser'\nimport moment from \"moment\"\n\nimport './LRCParser.css';\n\nclass LRCParser extends Component {\n  constructor(props){\n    super(props);\n\n    this.state= {\n      title: \"hersss\",\n      lineNumber:1,\n      prevLine: \"\",\n      currentLine:\"\",\n      nextLine: \"\",\n      arrayLyrics: [],\n      eventDate: moment.duration().add({days:0,hours:0,minutes:0,seconds:0}),\n      lrc: new Lyric({\n        onPlay: this.onPlayFunction,\n        onSetLyric: this.onSetLyricFunction,\n        offset: 15000\n      })\n    }\n  }\n\n  onPlayFunction = (lineNumber, currentLine) => {\n    this.setState({lineNumber: lineNumber, currentLine: currentLine})\n  }\n\n  onSetLyricFunction = (arrayLyrics) => {\n    this.setState({arrayLyrics: arrayLyrics})\n  }\n\n  updateTimer=()=>{\n    const x = setInterval(()=>{\n\n      let { eventDate} = this.state\n\n      if (!this.props.pause){\n        eventDate = eventDate.add(1,\"s\")\n        this.state.lrc.play((eventDate.minutes() * 60000) + (eventDate.seconds() * 1000))\n\n        this.setState({\n          eventDate\n        })\n      }else{\n        this.state.lrc.pause()\n      }\n    },1000)\n  }\n\n  componentDidMount(){\n    this.updateTimer()\n\n    this.state.lrc.setLyric(this.props.lyrics)\n    this.state.lrc.play(0)\n  }\n\n  render() {\n    return (\n      <div className=\"Lyrics-container LRCParser-container\">\n        {this.state.arrayLyrics[this.state.lineNumber - 1] &&\n          <p>{cleanLine(this.state.arrayLyrics[this.state.lineNumber - 1].text)}</p>\n        }\n        <p className=\"LRCParser-currentLine\">\n          {cleanLine(this.state.currentLine)}\n        </p>\n        {this.state.arrayLyrics[this.state.lineNumber + 1] &&\n          <p>{cleanLine(this.state.arrayLyrics[this.state.lineNumber + 1].text)}</p>\n        }\n      </div>\n    );\n  }\n}\n\nfunction cleanLine(string){\n  return string.replace(/[^\\w\\s]/gi, '').toLowerCase().replace(\"by rentanadvisercom\", '***')\n}\n\nexport default LRCParser;\n"]},"metadata":{},"sourceType":"module"}